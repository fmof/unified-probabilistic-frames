TOP := $(shell cd "$(shell pwd)/$(dir $(lastword $(MAKEFILE_LIST)))" && pwd)

-include Makefile.local

__SYSTEM_INCLUDE_DIR ?= /usr/local/include
__SYSTEM_LIB_DIR ?= /usr/local/lib

#############################
######### THRIFT ############
#############################
THRIFT_INCLUDE_DIR ?= $(__SYSTEM_INCLUDE_DIR)
THRIFT_LIB_DIR ?= $(__SYSTEM_LIB_DIR)
THRIFT_EXEC ?= thrift

#############################
########## BOOST ############
#############################
BOOST_INCLUDE_DIR ?= $(__SYSTEM_INCLUDE_DIR)
BOOST_LIB_DIR ?= $(__SYSTEM_LIB_DIR)

#############################
############ GSL ############
#############################
GSL_INCLUDE_DIR ?= $(__SYSTEM_INCLUDE_DIR)
GSL_LIB_DIR ?= $(__SYSTEM_LIB_DIR)

#############################
########## ATLAS ############
#############################
ATLAS_INCLUDE_DIR ?= $(__SYSTEM_INCLUDE_DIR)
ATLAS_LIB_DIR ?= $(__SYSTEM_LIB_DIR)

#############################
########## LBFGS ############
#############################
LBFGS_INCLUDE_DIR ?= $(__SYSTEM_INCLUDE_DIR)
LBFGS_LIB_DIR ?= $(__SYSTEM_LIB_DIR)

#############################
########## GLOG #############
#############################
GLOG_INCLUDE_DIR ?= $(__SYSTEM_INCLUDE_DIR)
GLOG_LIB_DIR ?= $(__SYSTEM_LIB_DIR)

#############################
######### HIREDIS ###########
#############################
HIREDIS_INCLUDE_DIR ?= $(__SYSTEM_INCLUDE_DIR)
HIREDIS_LIB_DIR ?= $(__SYSTEM_LIB_DIR)

#############################
######## HIHIREDIS ##########
#############################
HIHIREDIS_INCLUDE_DIR ?= $(__SYSTEM_INCLUDE_DIR)
HIHIREDIS_LIB_DIR ?= $(__SYSTEM_LIB_DIR)

#############################
######### ARCHIVE ###########
#############################
ARCHIVE_INCLUDE_DIR ?= $(__SYSTEM_INCLUDE_DIR)
ARCHIVE_LIB_DIR ?= $(__SYSTEM_LIB_DIR)

#############################
########## EIGEN ############
#############################
EIGEN_INCLUDE_DIR ?= $(shell pwd)/eigen-3.2.8

#############################
########## GTEST ############
#############################
GTEST_DIR ?= $(shell pwd)/gtest-1.7.0

######################################################################
######################################################################
######################################################################
######### YOU (MOST LIKELY) DO NOT NEED TO CHANGE BELOW HERE #########
######################################################################
######################################################################
######################################################################

#############################
######## CONCRETE ###########
#############################
CONCRETE_CORE_INCLUDE_DIR ?= $(TOP)/static_concrete/4.8/include
CONCRETE_CORE_LIB_DIR ?= $(TOP)/static_concrete/4.8/lib
CONCRETE_UTIL_INCLUDE_DIR ?= $(TOP)/static_concrete/4.8/include
CONCRETE_UTIL_LIB_DIR ?= $(TOP)/static_concrete/4.8/lib

MINSKY_INCLUDE_DIR ?= $(TOP)/minsky/include
MINSKY_LIB_DIR ?= $(TOP)/minsky/lib

#export LD_LIBRARY_PATH := $(BOOST_LIB_DIR):$(THRIFT_LIB_DIR):$(GSL_LIB_DIR):$(CONCRETE_CORE_LIB_DIR):$(CONCRETE_UTIL_LIB_DIR):$(LD_LIBRARY_PATH)
export LD_LIBRARY_PATH := $(BOOST_LIB_DIR):$(THRIFT_LIB_DIR):$(GSL_LIB_DIR):$(LD_LIBRARY_PATH)

ifeq ($(shell uname -s),Darwin)
	export SHLIB_LIB_PATH_ENV_VAR := DYLD_LIBRARY_PATH
	export SHLIB_SUFFIX := .dylib
	export SHLIB_NAME_FLAG := -install_name
	export DYLD_LIBRARY_PATH := $(LD_LIBRARY_PATH):$(DYLD_LIBRARY_PATH)
#	export CXXFLAGS += -stdlib=libstdc++
else
	export SHLIB_LIB_PATH_ENV_VAR := LD_LIBRARY_PATH
	export SHLIB_SUFFIX := .so
	export SHLIB_NAME_FLAG := -soname
	export TEST_FLAGS := -pthread -DGTEST_USE_OWN_TR1_TUPLE=0
endif

#CONCRETE_LINKING_TYPE = $(SHLIB_SUFFIX)
# CONCRETE_LINKING_TYPE = .a
# CONCRETE_SO := $(CONCRETE_CORE_LIB_DIR)/libconcrete$(CONCRETE_LINKING_TYPE)
# CONCRETE_UTIL_SO := $(CONCRETE_UTIL_LIB_DIR)/libconcrete_util$(CONCRETE_LINKING_TYPE)
# #CONCRETE_LINKING_FLAGS = $(CONCRETE_UTIL_SO) $(CONCRETE_SO)

MINSKY_LINKING_TYPE = .a
MINSKY_SO := $(MINSKY_LIB_DIR)/libminskythrift$(MINSKY_LINKING_TYPE)
MINSKY_LINKING_FLAGS = $(MINSKY_SO)
#MINSKY_LINKING_FLAGS = -static $(MINSKY_SO)
# First we're going to define C++ compiler flags
# the HAVE_CONFIG_H is to get TCompactProtocol working
# note that we add -shared and -fPIC later on
CXX_THRIFT_FLAGS := -DHAVE_NETINET_IN_H -DHAVE_INTTYPES_H -DHAVE_CONFIG_H
#\
#		 $(THRIFT_INC)
CXX_BOOST_FLAGS := -DBOOST_LOG_DYN_LINK

# Find the multi-threaded version of the Boost logging library
#
# If you install Boost from source, the multi-threaded library will be:
#   lib/libboost_log.dylib
# If you use Brew to install Boost on OS X, Brew will build Boost
# with the flags:
#   ./b2 --layout=tagged threading=multi,single
# which will change the default name of the multi-threaded version
# of the Boost logging library:
#   lib/libboost_log-mt.dylib  -  multi-threaded version
#   lib/libboost_log.dylib     -  single-threaded version
ifneq ($(wildcard $(BOOST_LIB_DIR)/libboost_log-mt$(SHLIB_SUFFIX)),)
	BOOST_LOG_LIB=boost_log-mt
else
	BOOST_LOG_LIB=boost_log
endif

ATLAS_LIBS := lapack f77blas cblas atlas pthread m
LITTLE_Ls_1 := thrift thriftz
LITTLE_Ls_2 := z $(ATLAS_LIBS) $(BOOST_LOG_LIB) gsl gslcblas gsl gslcblas m boost_regex boost_program_options boost_serialization boost_system boost_filesystem boost_iostreams lbfgs glog hihiredis hiredis hihiredis archive

#############################
########## COLORS ###########
#############################
NO_COLOR=\033[0m
STATUS_COLOR=\033[34;01m
MAGENTA_COLOR=\033[35;01m
OK_COLOR=\033[32;01m
ERROR_COLOR=\033[31;01m
WARN_COLOR=\033[33;01m

OK_STRING=$(OK_COLOR)[OK]$(NO_COLOR)
ERROR_STRING=$(ERROR_COLOR)[ERROR]$(NO_COLOR)
WARN_STRING=$(WARN_COLOR)[WARNING]$(NO_COLOR)

ECHO ?= echo

verify_exist = @if [ ! -e "$(1)" ]; then \
echo "$(ERROR_STRING) File $(MAGENTA_COLOR)$(1)$(NO_COLOR) does not exist" ; \
exit 1; \
fi

ifeq ("$(shell echo "int main(){}" | $(CXX) -fdiagnostics-color -x c - -o /dev/null 2>&1)", "")
     CXXFLAGS += -fdiagnostics-color
else ifeq ("$(shell echo "int main(){}" | $(CXX) -fcolor-diagnostics -x c - -o /dev/null 2>&1)", "")
     CXXFLAGS += --fdiagnostics-color
endif

###################################################
###################################################

export PUBLIC_UPF ?= 1
ifeq ($(PUBLIC_UPF), 1)
	BUILD_SPECIFIC_CXXFLAGS += -DPUBLIC_UPF
endif

BUILD_DIR := build

SHARED_BUILD_DIR := $(TOP)/build
SHARED_BUILD_DIR_LINK := $(SHARED_BUILD_DIR)
SHARED_RELEASE_BUILD_DIR := $(SHARED_BUILD_DIR)_release
SHARED_DEBUG_BUILD_DIR := $(SHARED_BUILD_DIR)_debug
SHARED_OTHER_BUILD_DIR := 0

## and then we're going to replicate the same structure for subdirectories
BUILD_DIR := build
BUILD_DIR_LINK := $(BUILD_DIR)
RELEASE_BUILD_DIR := $(BUILD_DIR)_release
DEBUG_BUILD_DIR := $(BUILD_DIR)_debug

export DEBUG ?= 0
# If we want to debug the generated C++, then 
# explicitly set BUILD=debug
export BUILD ?= release
RUNNER ?= $(SHELL)
ifeq ($(DEBUG), 1)
	SHARED_BUILD_DIR := $(SHARED_DEBUG_BUILD_DIR)
	SHARED_OTHER_BUILD_DIR := $(SHARED_RELEASE_BUILD_DIR)
	BUILD_DIR := $(DEBUG_BUILD_DIR)
	OTHER_BUILD_DIR := $(RELEASE_BUILD_DIR)
	BUILD = debug
	RUNNER = gdb
	GTEST_FLAGS += -g -O0
	BUILD_SPECIFIC_CXXFLAGS += -DUPF_UNIT_TEST -DFERRUM_UNIT_TEST
else
	SHARED_BUILD_DIR := $(SHARED_RELEASE_BUILD_DIR)
	SHARED_OTHER_BUILD_DIR := $(SHARED_DEBUG_BUILD_DIR)
	BUILD_DIR := $(RELEASE_BUILD_DIR)
	OTHER_BUILD_DIR := $(DEBUG_BUILD_DIR)
	RUNNER += -c 
endif

export LINK_HOW ?= dynamic
SHARED_MODEL_LINK ?= 0

SHARED_BUILD_WHERE=$(SHARED_BUILD_DIR)/build
SHARED_INCLUDE_WHERE=$(SHARED_BUILD_DIR)/include
SHARED_LIB_WHERE=$(SHARED_BUILD_DIR)/lib
SHARED_TEST_WHERE=$(SHARED_BUILD_DIR)/test
SHARED_EXC_WHERE=$(SHARED_BUILD_DIR)/exec

# SHARED_NAME := $(SHARED_LIB_WHERE)/lib$(PROJECT)$(SHLIB_SUFFIX)
# SHARED_STATIC_NAME := $(SHARED_LIB_WHERE)/lib$(PROJECT).a

ifeq ("$(LINK_HOW)","dynamic")
	SHARED_MODEL_LINK := $(NAME)
else
	SHARED_MODEL_LINK := $(STATIC_NAME)
endif

# We're always going to compile to C++ 2011 standard
CXX_BUILD_FLAGS_BASE = -g3 -gdwarf-2 -std=c++11 -Wall $(CXX_LOCAL_BUILD_OVERRIDES)
CXX_BUILD_FLAGS_debug   := -O0
CXX_BUILD_FLAGS_release := -O3

# set the basic compile options
CXXFLAGS_1 += $(CXX_BUILD_FLAGS_BASE) $(CXX_BUILD_FLAGS_$(BUILD))
# add Boost
CXXFLAGS_1 += $(CXX_BOOST_FLAGS) -I$(BOOST_INCLUDE_DIR)
# add thrift
CXXFLAGS_1 += -I$(THRIFT_INCLUDE_DIR) $(CXX_THRIFT_FLAGS)
# add glog
CXXFLAGS_1 += -I$(GLOG_INCLUDE_DIR)
# add concrete
CXXFLAGS_1 += -I$(CONCRETE_CORE_INCLUDE_DIR) 
CXXFLAGS_1 += -I$(CONCRETE_UTIL_INCLUDE_DIR) 
# add minsky
CXXFLAGS_1 += -I$(MINSKY_INCLUDE_DIR)
# add GSL
CXXFLAGS_1 += -I$(GSL_INCLUDE_DIR)
# add libLBFGS
CXXFLAGS_1 += -I$(LBFGS_INCLUDE_DIR)
# add hiredis
CXXFLAGS_1 += -I$(HIREDIS_INCLUDE_DIR)
# add hihiredis
CXXFLAGS_1 += -I$(HIHIREDIS_INCLUDE_DIR)
# add atlas/cblas
CXXFLAGS_1 += -I$(ATLAS_INCLUDE_DIR)
# add archive
CXXFLAGS_1 += -I$(ARCHIVE_INCLUDE_DIR)
# add eigen
CXXFLAGS_1 += -I$(EIGEN_INCLUDE_DIR)
# now order & remove duplicates
CXXFLAGS_srt = $(sort $(CXXFLAGS_1))
CXXFLAGS = $(CXXFLAGS_srt)
# add openmp
CXXFLAGS += -fopenmp
CXXFLAGS += $(BUILD_SPECIFIC_CXXFLAGS)

# CXXFLAGS += -ftree-vectorizer-verbose=2

# for linking
LITTLE_L_FLAGS := -Wl,-Bstatic $(foreach library,$(LITTLE_Ls_1), -l$(library)) \
  -Wl,-Bdynamic $(foreach library,$(LITTLE_Ls_2),-l$(library))
# The -fPIC is needed to generate position independent code, which
# is required for creating a shared library. The position independent
# code makes the generated machine code use relative rather than 
# absolute addresses.
CXX_SHARED_FLAGS := -shared -fPIC
CXX_LINKING_FLAGS := $(LITTLE_L_FLAGS)

INIT_LINKING_FLAGS := 
CXXFLAGS_L1 += $(INIT_LINKING_FLAGS)
# add Boost
CXXFLAGS_L1 += -L$(BOOST_LIB_DIR) 
# add thrift
CXXFLAGS_L1 += -L$(THRIFT_LIB_DIR)
# add glog
CXXFLAGS_L1 += -L$(GLOG_LIB_DIR)
# add GSL
CXXFLAGS_L1 += -L$(GSL_LIB_DIR)
# add libLBFGS
CXXFLAGS_L1 += -L$(LBFGS_LIB_DIR)
# add hihiredis
CXXFLAGS_L1 += -L$(HIHIREDIS_LIB_DIR)
# add hiredis
CXXFLAGS_L1 += -L$(HIREDIS_LIB_DIR)
# add atlas
CXXFLAGS_L1 += -L$(ATLAS_LIB_DIR)
# add archive
CXXFLAGS_L1 += -L$(ARCHIVE_LIB_DIR)
CXXFLAGS_L_srt = $(sort $(CXXFLAGS_L1))
CXXFLAGS_L = $(CXXFLAGS_L_srt)
CXXFLAGS_L += -fopenmp

export SHARED_CONFIG := $(TOP)/Makefile.config


## https://gist.github.com/vmrob/8924878
# AWK_CMD = awk '{ printf "%-30s %-10s\n",$$1, $$2; }'
# PRINT_ERROR = printf "$@ $(ERROR_STRING)\n" | $(AWK_CMD) && printf "$(1)\n$$LOG\n" && false
# PRINT_WARNING = printf "$@ $(WARN_STRING)\n" | $(AWK_CMD) && printf "$(1)\n$$LOG\n"
# PRINT_OK = printf "$@ $(OK_STRING)\n" | $(AWK_CMD)
# __CXX = $(CXX)
# __CXX_CALL = LOG=$$($(1) 2>&1) ; if [ $$? -eq 1 ]; then $(PRINT_ERROR); elif [ "$$LOG" != "" ] ; then $(PRINT_WARNING); else $(PRINT_OK); fi;
# CXX = 
